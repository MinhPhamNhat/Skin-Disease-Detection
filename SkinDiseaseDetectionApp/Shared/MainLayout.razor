@inherits LayoutComponentBase
@using MudBlazor;
@using Microsoft.JSInterop;
@inject IJSRuntime _jSRuntime

<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider />

<div class="page">
    <header class="top-row">
        <div class="h-100 d-flex gap-16 justify-center align-center">
            <MudButton Href="/">Trang chủ</MudButton>
            @if (IsLogined)
            {
                <MudButton Href="/history">Lịch sử bệnh</MudButton>
            }
            else
            {
                <MudButton Href="/login">Đăng nhập</MudButton>
                <MudButton Href="/register">Đăng ký</MudButton>
            }
        </div>

        @if (IsLogined)
        {
            <div class="logined">
                <MudButton OnClick="LogOut">Đăng xuất</MudButton> <span>|</span> <span>@User?.Fullname</span>
            </div>
        }
        else
        {
        }
    </header>
    <main>
        <img src="header-bg.png" class="bg-img" />
        <div class="main">
            @Body
        </div>
        <div></div>
    </main>
    @* <MudAlert Class="w-100 fact-component" Severity="Severity.Normal">
        @if (IsFactLoading)
        {
            <div class="d-flex w-100">
                <MudSkeleton Class="w-100" />
            </div>
        }
        else
        {
            <div class="d-flex justify-space-between w-100">
                <MudText Style="font-size: 12px;" Class="d-flex align-center" Typo="Typo.caption">
                    <i>Fact: @Fact</i>
                </MudText>
                <MudIconButton Style="font-size: 12px;" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Text"
                    Size="Size.Small" Color="Color.Secondary" OnClick="generateFact">
                </MudIconButton>
            </div>
        }
    </MudAlert> *@
</div>


@code {
    public bool IsFactLoading { get; set; }
    public string Fact { get; set; }
    public bool IsLogined { get; set; }
    public UserDetailDto User { get; set; }

    [Inject] public Services.Interfaces.IUserService userService { get; set; }
    [Inject] public NavigationManager _navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await userService.GetUserDetail();
        if (User != null)
        {
            IsLogined = true;
        }
        else
        {
            IsLogined = false;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        @* if (firstRender)
        {
            await generateFact();
        } *@
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LogOut()
    {
        await _jSRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");
        IsLogined = false;
        _navigationManager.NavigateTo("/", forceLoad: true);
    }

    private async Task generateFact()
    {
        IsFactLoading = true;
        Fact = await _jSRuntime.InvokeAsync<string>("generateContent", Constants.Prompt.Fact);
        IsFactLoading = false;
        StateHasChanged();
    }

    private async Task OnLogin()
    {
        StateHasChanged();
    }

}
